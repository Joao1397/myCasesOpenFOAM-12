/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  12
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1.0; // Convert all lenghts to meters
// convertToMeters 0.1; // Convert all lenghts to meters

// h = 5.0 cm = 0.05 m
// L = L_1 + L_2 = 40h = 200cm = 2.0 m
// L_1 = 5h = 25 cm = 0.25 m
// L_2 = 35h = 175 cm = 1.75 m

h 0.05; // [m]
h_minus #calc "-1.0 * $h";
Lu #calc "-5.0 * $h";
Ld #calc "35.0 * $h";
L #calc "$Lu + $Ld";
Hd #calc "2.0 * $h";
W #calc "4.0 * $h";
Ar #calc "$W / $h";
Er #calc "$Hd / ($Hd - $h)";
z 0.1; // [m]

// Aspect Ratio Ar = W / h = 4.0
// Expansion Ratio Er = Hd / (Hd - h) = 2.0
// L = Lu + Ld = 5h + 35h = 40h

vertices // Points are given in decameters    
(
    ($Lu 0.0 0.0) // 0
    (0.0 0.0 0.0) // 1
    (0.0 $h 0.0) // 2
    ($Lu $h 0.0) // 3
    ($Lu 0.0 $z) // 4
    (0.0 0.0 $z) // 5
    (0.0 $h $z) // 6
    ($Lu $h $z) // 7

    (0.0 0.0 0.0) // 8
    ($Ld 0.0 0.0) // 9
    ($Ld $h 0.0) // 10
    (0.0 $h 0.0) // 11
    (0.0 0.0 $z) // 12
    ($Ld 0.0 $z) // 13
    ($Ld $h $z) // 14
    (0.0 $h $z) // 15

    (0.0 $h_minus 0.0) // 16
    ($Ld $h_minus 0.0) // 17
    ($Ld 0.0 0.0) // 18
    (0.0 0.0 0.0) // 19
    (0.0 $h_minus $z) // 20
    ($Ld $h_minus $z) // 21
    ($Ld 0.0 $z) // 22
    (0.0 0.0 $z) // 23
);

/*
vertices // Points are given in decameters    
(
    (0.0 0.0 0.0) // 0
    (17.5 0.0 0.0) // 1
    (17.5 0.5 0.0) // 2
    (0.0 0.5 0.0) // 3
    (0.0 0.0 0.1) // 4
    (17.5 0.0 0.1) // 5 
    (17.5 0.5 0.1) // 6
    (0.0 0.5 0.1) // 7

    (17.5 1.0 0.0) // 8
    (0.0 1.0 0.0) // 9
    (17.5 1.0 0.1) // 10
    (0.0 1.0 0.1) // 11

    (-2.5 0.5 0.0) // 12
    (-2.5 1.0 0.0) // 13
    (-2.5 0.5 0.1) // 14
    (-2.5 1.0 0.1) // 15
);
*/

blocks          
(
    hex (0 1 2 3 4 5 6 7) (24 20 1) simpleGrading (1 1 1)
    hex (8 9 10 11 12 13 14 15) (210 40 1) simpleGrading (1 1 1)
    hex (16 17 18 19 20 21 22 23) (210 40 1) simpleGrading (1 1 1)
);

boundary       
(

    inlet
    {
        type patch;
        faces
        (
            (0 3 7 4)
        );
    }

    outlet
    {
        type patch;
        faces
        (
            (17 18 22 21)
            (9 10 14 13)
        );
    }

    topWall
    {
        type wall;
        faces
        (
            (10 11 15 14)
            (2 3 7 6)
        );
    }

    stepWall
    {
        type wall;
        faces
        (
            (1 0 4 5)
            (16 19 23 20)
        );
    }

    baseWall
    {
        type wall;
        faces
        (
            (17 16 20 21)
        );
    }

    frontAndBack
    {
        type empty;
        faces
        (
            (4 5 6 7)
            (0 1 2 3)
            (12 13 14 15)
            (8 9 10 11)
            (20 21 22 23)
            (16 17 18 19)
        );
    }

    interface1
    {
        type wall;
        faces
        (
            (5 1 2 6)
        );
    }

    interface2
    {
        type wall;
        faces
        (
            (12 8 11 15)
        );
    }

    interface3
    {
        type wall;
        faces
        (
            (8 9 13 12)
        );
    }

    interface4
    {
        type wall;
        faces
        (
            (19 18 22 23)
        );
    }
);

mergePatchPairs
(
    (interface1 interface2)
    (interface3 interface4)
);

// ************************************************************************* //
